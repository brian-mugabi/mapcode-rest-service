#
# Copyright (C) 2016-2017, Stichting Mapcode Foundation (http://www.mapcode.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

akka {

  # Log-level.
  loglevel = "INFO"

  # Log the complete configuration at INFO level when the actor system is started.
  log-config-on-start = off

  # Use our SLF4J logging mechanism instead of the default logger.
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

  actor {

    typed {

      # Default timeout for typed actor methods with non-void return type.
      # This timeout has been increased from 5s to 50s to allow typed actors to
      # wait for external HTTP timeouts as well (usually around 30s).
      timeout = "50s"
    }

    default-dispatcher {
      executor = "thread-pool-executor"
    }

    debug {

      # Enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like).
      autoreceive = on

      # Enable DEBUG logging of actor lifecycle changes.
      lifecycle = on
    }

    default-dispatcher {
      executor = "thread-pool-executor"
    }

    # The rootactor has its own dispatcher. This makes sure we do not block the Guice injection mechanism waiting for an actor to be created.
    rootactor-dispatcher {
      executor = "thread-pool-executor"

      core-pool-size-factor = 1
      max-pool-size-factor = 1

      max-pool-size-min = 1
      max-pool-size-max = 1
      core-pool-size-min = 1
      core-pool-size-max = 1
    }

    typed {
      # Default timeout for typed actor methods with non-void return type.
      timeout = 50s
    }
  }
}
